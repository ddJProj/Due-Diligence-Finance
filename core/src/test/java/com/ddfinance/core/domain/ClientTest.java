package com.ddfinance.core.domain;

import com.ddfinance.core.domain.enums.Role;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Comprehensive test class for Client entity
 * Following TDD methodology - Red, Green, Refactor
 */
class ClientTest {
    private Client client;
    private UserAccount userAccount;
    private Employee assignedEmployee;

    @BeforeEach
    void setUp() {
        client = new Client();

        // Create a test UserAccount for the client
        userAccount = new UserAccount("client@example.com", "password123", "John", "Doe", Role.CLIENT);
        userAccount.setId(1L);

        // Create a test Employee
        assignedEmployee = new Employee();
        assignedEmployee.setId(2L);
        assignedEmployee.setEmployeeId("FIN-NYC-002");
        assignedEmployee.setLocationId("NYC");
        assignedEmployee.setDepartment("FINANCE");

        // Create a test UserAccount for the employee
        UserAccount employeeAccount = new UserAccount("employee@example.com", "password123", "Jane", "Smith", Role.EMPLOYEE);
        employeeAccount.setId(3L);
        assignedEmployee.setUserAccount(employeeAccount);
    }

    // ========== Constructor Tests ==========
    @Test
    void testDefaultConstructor() {
        assertNotNull(client);
        assertNull(client.getId());
        assertNull(client.getClientId());
        assertNull(client.getUserAccount());
        assertNull(client.getAssignedEmployee());
        assertNull(client.getRegistrationDate());
        assertNotNull(client.getInvestments());
        assertTrue(client.getInvestments().isEmpty());
    }

    @Test
    void testParameterizedConstructor() {
        String clientId = "CLI-001";
        Client paramClient = new Client(userAccount, clientId);

        assertNotNull(paramClient);
        assertEquals(clientId, paramClient.getClientId());
        assertEquals(userAccount, paramClient.getUserAccount());
        assertNotNull(paramClient.getRegistrationDate());
        assertNotNull(paramClient.getInvestments());
    }

    @Test
    void testParameterizedConstructorWithEmployee() {
        String clientId = "CLI-001";
        Client paramClient = new Client(userAccount, clientId, assignedEmployee);

        assertNotNull(paramClient);
        assertEquals(clientId, paramClient.getClientId());
        assertEquals(userAccount, paramClient.getUserAccount());
        assertEquals(assignedEmployee, paramClient.getAssignedEmployee());
        assertNotNull(paramClient.getRegistrationDate());
    }

    @Test
    void testAutoGeneratedClientId() {
        // Test the auto-generation logic when no clientId is provided
        Client autoClient = new Client(userAccount, null);
        autoClient.setId(123L); // Simulate database-generated ID

        // Manually trigger the post-persist logic for testing
        autoClient.postPersist();

        assertEquals("CLI-123", autoClient.getClientId());
    }

    @Test
    void testAutoGeneratedClientIdWithEmployeeLocation() {
        assignedEmployee.setLocationId("NYC");
        Client autoClient = new Client(userAccount, null, assignedEmployee);
        autoClient.setId(456L);

        // Manually trigger the post-persist logic for testing
        autoClient.postPersist();

        assertEquals("NYC-456", autoClient.getClientId());
    }

    // ========== Basic Field Tests ==========
    @Test
    void testSetGetId() {
        Long id = 123L;
        client.setId(id);
        assertEquals(id, client.getId());
    }

    @Test
    void testSetGetClientId() {
        String clientId = "CLI-001";
        client.setClientId(clientId);
        assertEquals(clientId, client.getClientId());
    }

    @Test
    void testSetGetUserAccount() {
        client.setUserAccount(userAccount);
        assertEquals(userAccount, client.getUserAccount());
    }

    @Test
    void testSetGetAssignedEmployee() {
        client.setAssignedEmployee(assignedEmployee);
        assertEquals(assignedEmployee, client.getAssignedEmployee());
    }

    @Test
    void testSetGetRegistrationDate() {
        LocalDateTime registrationDate = LocalDateTime.now();
        client.setRegistrationDate(registrationDate);
        assertEquals(registrationDate, client.getRegistrationDate());
    }

    // ========== Investment Management Tests ==========
    @Test
    void testSetGetInvestments() {
        Set<Investment> investments = new HashSet<>();
        Investment investment1 = new Investment();
        investment1.setId(1L);
        investments.add(investment1);

        client.setInvestments(investments);
        assertEquals(investments, client.getInvestments());
        assertEquals(1, client.getInvestments().size());
    }

    @Test
    void testAddInvestment() {
        Investment investment = new Investment();
        investment.setId(1L);

        assertTrue(client.getInvestments().isEmpty());
        client.addInvestment(investment);

        assertEquals(1, client.getInvestments().size());
        assertTrue(client.getInvestments().contains(investment));
    }

    @Test
    void testRemoveInvestment() {
        Investment investment = new Investment();
        investment.setId(1L);

        client.addInvestment(investment);
        assertEquals(1, client.getInvestments().size());

        client.removeInvestment(investment);
        assertTrue(client.getInvestments().isEmpty());
    }

    @Test
    void testGetInvestmentCount() {
        assertEquals(0, client.getInvestmentCount());

        Investment investment1 = new Investment();
        Investment investment2 = new Investment();
        client.addInvestment(investment1);
        client.addInvestment(investment2);

        assertEquals(2, client.getInvestmentCount());
    }

    // ========== Business Logic Tests ==========
    @Test
    void testGetClientName() {
        client.setUserAccount(userAccount);
        assertEquals("John Doe", client.getClientName());
    }

    @Test
    void testGetClientNameWithNullUserAccount() {
        assertNull(client.getClientName());
    }

    @Test
    void testGetClientEmail() {
        client.setUserAccount(userAccount);
        assertEquals("client@example.com", client.getClientEmail());
    }

    @Test
    void testGetClientEmailWithNullUserAccount() {
        assertNull(client.getClientEmail());
    }

    @Test
    void testGetAssignedEmployeeName() {
        client.setAssignedEmployee(assignedEmployee);
        assertEquals("Jane Smith", client.getAssignedEmployeeName());
    }

    @Test
    void testGetAssignedEmployeeNameWithNullEmployee() {
        assertNull(client.getAssignedEmployeeName());
    }

    @Test
    void testGetAssignedEmployeeId() {
        client.setAssignedEmployee(assignedEmployee);
        assertEquals("FIN-NYC-002", client.getAssignedEmployeeId());
    }

    @Test
    void testGetAssignedEmployeeIdWithNullEmployee() {
        assertNull(client.getAssignedEmployeeId());
    }

    @Test
    void testIsAssignedToEmployee() {
        assertFalse(client.isAssignedToEmployee());

        client.setAssignedEmployee(assignedEmployee);
        assertTrue(client.isAssignedToEmployee());
    }

    @Test
    void testHasInvestments() {
        assertFalse(client.hasInvestments());

        Investment investment = new Investment();
        client.addInvestment(investment);
        assertTrue(client.hasInvestments());
    }

    // ========== Assignment Logic Tests ==========
    @Test
    void testAssignToEmployee() {
        assertFalse(client.isAssignedToEmployee());

        boolean result = client.assignToEmployee(assignedEmployee);

        assertTrue(result);
        assertTrue(client.isAssignedToEmployee());
        assertEquals(assignedEmployee, client.getAssignedEmployee());
    }

    @Test
    void testAssignToEmployeeWhenAlreadyAssigned() {
        client.setAssignedEmployee(assignedEmployee);

        Employee newEmployee = new Employee();
        newEmployee.setId(4L);
        newEmployee.setEmployeeId("ADM-CLI-004");
        newEmployee.setLocationId("CLI");
        newEmployee.setDepartment("ADMIN");

        boolean result = client.assignToEmployee(newEmployee);

        assertTrue(result); // Should allow reassignment
        assertEquals(newEmployee, client.getAssignedEmployee());
    }

    @Test
    void testAssignToNullEmployee() {
        boolean result = client.assignToEmployee(null);

        assertFalse(result);
        assertNull(client.getAssignedEmployee());
    }

    @Test
    void testUnassignFromEmployee() {
        client.setAssignedEmployee(assignedEmployee);
        assertTrue(client.isAssignedToEmployee());

        client.unassignFromEmployee();

        assertFalse(client.isAssignedToEmployee());
        assertNull(client.getAssignedEmployee());
    }

    // ========== Validation Tests ==========
    @Test
    void testIsValidClient() {
        // Empty client should not be valid
        assertFalse(client.isValidClient());

        // Set required fields
        client.setClientId("CLI-001");
        client.setUserAccount(userAccount);
        client.setRegistrationDate(LocalDateTime.now());

        assertTrue(client.isValidClient());
    }

    @Test
    void testIsValidClientWithMissingFields() {
        client.setClientId("CLI-001");
        client.setUserAccount(userAccount);
        // Missing registration date

        assertFalse(client.isValidClient());
    }

    @Test
    void testIsValidClientId() {
        client.setClientId("CLI-001");
        assertTrue(client.isValidClientId());

        client.setClientId("");
        assertFalse(client.isValidClientId());

        client.setClientId(null);
        assertFalse(client.isValidClientId());

        client.setClientId("INVALID_FORMAT");
        assertFalse(client.isValidClientId());
    }

    // ========== Status Tests ==========
    @Test
    void testGetClientStatus() {
        // New client without employee should be PENDING
        client.setUserAccount(userAccount);
        client.setClientId("CLI-001");
        client.setRegistrationDate(LocalDateTime.now());

        assertEquals("PENDING", client.getClientStatus());

        // Assigned client should be ACTIVE
        client.setAssignedEmployee(assignedEmployee);
        assertEquals("ACTIVE", client.getClientStatus());
    }

    @Test
    void testGetDaysSinceRegistration() {
        LocalDateTime threeDaysAgo = LocalDateTime.now().minusDays(3);
        client.setRegistrationDate(threeDaysAgo);

        assertEquals(3, client.getDaysSinceRegistration());
    }

    @Test
    void testGetDaysSinceRegistrationWithNullDate() {
        assertEquals(0, client.getDaysSinceRegistration());
    }

    // ========== ToString and Equality Tests ==========
    @Test
    void testToString() {
        client.setId(1L);
        client.setClientId("CLI-001");
        client.setUserAccount(userAccount);

        String result = client.toString();
        assertTrue(result.contains("Client"));
        assertTrue(result.contains("id=1"));
        assertTrue(result.contains("clientId=CLI-001"));
    }

    @Test
    void testEqualsAndHashCode() {
        Client client1 = new Client(userAccount, "CLI-001");
        Client client2 = new Client(userAccount, "CLI-001");

        client1.setId(1L);
        client2.setId(1L);

        assertEquals(client1, client2);
        assertEquals(client1.hashCode(), client2.hashCode());

        // Different IDs should not be equal
        client2.setId(2L);
        assertNotEquals(client1, client2);
    }

    @AfterEach
    void tearDown() {
        client = null;
        userAccount = null;
        assignedEmployee = null;
    }
}
